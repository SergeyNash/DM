"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SARIF –ø–∞—Ä—Å–µ—Ä–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(__file__))

from sarif_parser import SarifParser, print_report_summary, SeverityLevel


def test_parse_files():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    test_files = [
        r"C:\Users\ssinyakov\Downloads\bbs2_ru.sarif",
        r"C:\Users\ssinyakov\Downloads\bbs1_ru.sarif",
        r"C:\Users\ssinyakov\Downloads\AI3.sarif",
    ]
    
    for file_path in test_files:
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
        
        print(f"\n{'='*80}")
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}")
        print(f"{'='*80}")
        
        try:
            # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
            report = SarifParser.parse_file(file_path)
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print_report_summary(report)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            
            # –ü–æ–¥—Å—á–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ö–æ–¥–æ–∫
            critical = [f for f in report.findings if f.level == SeverityLevel.ERROR]
            warnings = [f for f in report.findings if f.level == SeverityLevel.WARNING]
            
            print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö (ERROR): {len(critical)}")
            print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (WARNING): {len(warnings)}")
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
            files_with_issues = set()
            for finding in report.findings:
                for location in finding.locations:
                    if location.file_path:
                        files_with_issues.add(location.file_path)
            
            print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {len(files_with_issues)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
            if files_with_issues:
                print(f"\n  –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (–ø–µ—Ä–≤—ã–µ 5):")
                for i, file_path in enumerate(sorted(files_with_issues)[:5], 1):
                    print(f"    {i}. {file_path}")
            
            print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    print("üîç SARIF Parser - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n")
    test_parse_files()
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

